C51 COMPILER V9.57.0.0   UART                                                              03/18/2023 16:40:45 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Objects\uart.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE include\uart.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include) DEBUG OB
                    -JECTEXTEND PRINT(.\Listings\uart.lst) TABS(2) OBJECT(.\Objects\uart.obj)

line level    source

   1          #include "uart.h"
   2          #include "stdio.h"
   3          #include "delay.h"
   4          
   5          #define BAUD 115200UL             //串口波特率
   6          #define S1_S0 0x40              //P_SW1.6
   7          #define S1_S1 0x80              //P_SW1.7
   8          #define STI   0x02              //S4CON.1
   9          
  10          bit uart1_busy;
  11          bit uart4_busy;
  12          
  13          unsigned char uart1_buf[128] = {0};
  14          unsigned char UART1_LEN = 0, UART1_STA = 0;
  15          
  16          unsigned char uart4_race_buf[100] = {0};
  17          unsigned int uart4_race_count = 0;
  18          
  19          void Uart1Init(void)//串口初始化函数
  20          {
  21   1        ACC = P_SW1;
  22   1        ACC &= ~(S1_S0 | S1_S1);    //S1_S0=0 S1_S1=0(P3.0/RxD, P3.1/TxD)
  23   1        P_SW1 = ACC;
  24   1        SCON  = (SCON & 0x3f) | 0x40;                //8位可变波特率
  25   1        
  26   1        T2L = (65536 - (MAIN_Fosc/4/BAUD));   //设置波特率重装值
  27   1        T2H = (65536 - (MAIN_Fosc/4/BAUD))>>8;
  28   1      
  29   1        AUXR = 0x14;                //T2为1T模式, 并启动定时器2
  30   1        AUXR |= 0x01;               //选择定时器2为串口1的波特率发生器
  31   1        PS = 1; //高优先级中断
  32   1        
  33   1        ES = 1;     //使能串口1中断
  34   1        REN = 1;  //允许接收
  35   1        EA = 1;   //允许全局中断
  36   1      }
  37          
  38          //串口中断函数      不管程序运行到哪里，只要串口收到数据，程序就会停止 并 
             -跳转到这里，执行完中断函数后  再回到原来停止的地方 继续执行
  39          void Uart1() interrupt 4 using 1
  40          {
  41   1        unsigned char Res;
  42   1        
  43   1        if (RI)
  44   1        {
  45   2          RI = 0;
  46   2      
  47   2          Res = SBUF;
  48   2          if (UART1_LEN < 128)
  49   2          {
  50   3            uart1_buf[UART1_LEN++] = Res;
  51   3          }
  52   2      
  53   2          if (Res == '\r') //按下回车键
C51 COMPILER V9.57.0.0   UART                                                              03/18/2023 16:40:45 PAGE 2   

  54   2          {
  55   3            UART1_STA = 1;
  56   3            UART1_LEN = 0;
  57   3          }
  58   2        }
  59   1        if (TI)
  60   1        {
  61   2          TI = 0;
  62   2          uart1_busy = 0;
  63   2        }
  64   1      }
  65          
  66          //串口发送一个字节
  67          void SendData(unsigned char dat)  //dat是要发送的字节
  68          {
  69   1        while (uart1_busy)
  70   1          ; //等待前面的数据发送完成
  71   1        uart1_busy = 1;
  72   1        SBUF = dat; //写数据到UART1数据寄存器
  73   1      }
  74          
  75          //串口发送数组函数
  76          void Uart1SendData(char *s, unsigned short len)   //*s是一个指针   指向要发送的数组    len是
             -要发送数组的长度（单位字节）
  77          {
  78   1          while (len)               // 当len等于0  就借宿{}中的循环
  79   1          {
  80   2          SendData(*s++);         //发送当前字节  发送完成后  指针++  指向下一个字节
  81   2          len--;                  //发送长度减1
  82   2          }
  83   1      }
  84          
  85          // printf 函数用到的串口发送函数   如果没有  就不能用printf 这个函数
  86          char putchar(char c)
  87          {
  88   1        ES = 0;                 //关闭串口1中断
  89   1        
  90   1        SBUF = c;
  91   1        
  92   1        while(!TI);
  93   1        TI = 0;         //清除TI位
  94   1        
  95   1        ES = 1;                 //使能串口1中断
  96   1        
  97   1        return c;
  98   1      }
  99          
 100          // 发送字符串
 101          void SendString(char *s)
 102          {
 103   1        while (*s) //检测字符串结束标志
 104   1        {
 105   2          SendData(*s++); //发送当前字符
 106   2        }
 107   1      }
 108          
 109          #define S4_S0 0x04              //P_SW2.2
 110          #define S4RI  0x01              //S4CON.0
 111          #define S4TI  0x02              //S4CON.1
 112          #define S4RB8 0x04              //S4CON.2
 113          #define S4TB8 0x08              //S4CON.3
 114          
C51 COMPILER V9.57.0.0   UART                                                              03/18/2023 16:40:45 PAGE 3   

 115          
 116          void Uart4Init(void)
 117          {
 118   1          P_SW2 |= S4_S0;             //S4_S0=1 (P5.2/RxD4_2, P5.3/TxD4_2)
 119   1          S4CON = 0x50;               //8位可变波特率
 120   1      
 121   1          T4L = (65536 - (MAIN_Fosc/4/BAUD));   //设置波特率重装值
 122   1          T4H = (65536 - (MAIN_Fosc/4/BAUD))>>8;
 123   1          T4T3M |= 0x20;              //定时器4为1T模式
 124   1          T4T3M |= 0x80;              //定时器4开始计时
 125   1      
 126   1          IE2 = 0x10;                 //使能串口4中断
 127   1          EA = 1;
 128   1      }
 129          
 130          
 131          
 132          void Uart4() interrupt 18
 133          {
 134   1        if (S4CON & S4RI)
 135   1        {
 136   2          S4CON &= ~S4RI;         //清除S4RI位
 137   2            
 138   2          uart4_race_buf[uart4_race_count] = S4BUF; 
 139   2          uart4_race_count++;
 140   2          if(uart4_race_count>=100)
 141   2          {
 142   3            uart4_race_count = 0;
 143   3          }
 144   2        }
 145   1        if (S4CON & S4TI)
 146   1        {
 147   2          S4CON &= ~S4TI;         //清除S4TI位
 148   2          uart4_busy = 0;               //清忙标志
 149   2        }
 150   1      }
 151          
 152          
 153          void Uart4SendData(unsigned char dat)
 154          {
 155   1          
 156   1        S4CON &= ~S4TB8;        //设置校验位为0
 157   1        uart4_busy = 1;
 158   1        S4BUF = dat;
 159   1        while (uart4_busy);
 160   1      }
 161          
 162          /*----------------------------
 163          发送字符串
 164          ----------------------------*/
 165          void Uart4SendString(char *s)
 166          {
 167   1          while (*s)                  //检测字符串结束标志
 168   1          {
 169   2              Uart4SendData(*s++);         //发送当前字符
 170   2          }
 171   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    391    ----
   CONSTANT SIZE    =   ----    ----
C51 COMPILER V9.57.0.0   UART                                                              03/18/2023 16:40:45 PAGE 4   

   XDATA SIZE       =    232       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
